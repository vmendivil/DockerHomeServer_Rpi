version: "3.8"

############################# INSTRUCTIONS AND NOTES

## When ## found, uncomment for first execution, comment for further executions.

############################# NETWORKS

# Run: docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 t2_proxy

networks:
  t2_proxy:
    external:
      name: t2_proxy
  myvpn:
    external:
      name: myvpn
  default:
    driver: bridge

############################# SERVICES

services:

############################# INFRASTRUCTURE

  # Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:chevrotin # the chevrotin tag refers to v2.2.x
    restart: unless-stopped
    # Below commands are what go into traefik.yml if we were to use one instead
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      #- --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
##    Comment below line after first execution
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
#      t2_proxy:
#        ipv4_address: 192.168.90.254 # You can specify a static IP
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json # File must have chmod 600
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
##    Comment below line after first execution
#      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs. Ensure acme.json has data for all domains before commenting.
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME_BLOG"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME_BLOG"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  # Transmission with OpenVpn
  # Setup: https://www.youtube.com/watch?v=aPkRz0U_IPo
  transmission-openvpn:
    image: haugene/transmission-openvpn:latest-armhf
    container_name: transmission-openvpn
    restart: always
    networks:
      # - t2_proxy
      - myvpn
    ports:
      - "$TRANSMISSIONOPENVPNGUI:9091" # GUI
      - "$TRANSMISSIONOPENVPN:8888" # Transmission Port
    devices:
      - /dev/net/tun # This creates a tunnel for Transmission
    volumes:
      - '$DOCKERDIR/transmissionopenvpn:/config'
      - '$PERMDIR/Torrent:/data' # Downloads
      - '/etc/localtime:/etc/localtime:ro'
    environment:
      - CREATE_TUN_DEVICE=true
      - OPENVPN_PROVIDER=$OPENVPN_PROVIDER
      # - OPENVPN_CONFIG=CA Toronto # Can be comma separated
      - OPENVPN_USERNAME=$OPENVPN_USERNAME
      - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
      - WEBPROXY_ENABLED=true # Enable other containers to use the vpn
      - LOCAL_NETWORK=192.168.1.0/24 # Match the local network of this device
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60 # Restart if connection fails
      - PUID=$PUID
      - PGID=$PGID
      - TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED=false
      # Connections
      - TRANSMISSION_PEER_LIMIT_GLOBAL=1050
      - TRANSMISSION_MAX_PEERS_GLOBAL=1050
      - TRANSMISSION_PEER_LIMIT_PER_TORRENT=50
      - TRANSMISSION_UPLOAD_SLOTS_PER_TORRENT=5
      - TRANSMISSION_DOWNLOAD_QUEUE_ENABLED=true
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=20
      - TRANSMISSION_IDLE_SEEDING_LIM=5
      - TRANSMISSION_IDLE_SEEDING_LIMIT=5
      - TRANSMISSION_IDLE_SEEDING_LIMIT_ENABLED=true
      # Files
      # - TRANSMISSION_PREALLOCATION=1
      # Speed
      - TRANSMISSION_RATIO_LIMIT=2
      - TRANSMISSION_RATIO_LIMIT_ENABLED=true
      - TRANSMISSION_SPEED_LIMIT_UP=20
      - TRANSMISSION_SPEED_LIMIT_UP_ENABLED=true
    cap_add:
      - NET_ADMIN
    logging:
      driver: json-file
      options:
        max-size: 10m
    dns:
      - 8.8.8.8
      - 8.8.4.4
    # labels:
    #   - "traefik.enable=true"
    #   ## HTTP Routers
    #   - "traefik.http.routers.transmission-rtr.entrypoints=https"
    #   - "traefik.http.routers.transmission-rtr.rule=Host(`transmission.$DOMAINNAME`)"
    #   - "traefik.http.routers.transmission-rtr.tls=true"
    #   ## Middlewares
    #   - "traefik.http.routers.transmission-rtr.middlewares=chain-oauth@file"
    #   ## HTTP Services
    #   - "traefik.http.routers.transmission-rtr.service=transmission-svc"
    #   - "traefik.http.services.transmission-svc.loadbalancer.server.port=9091"

  ## Fail2ban - Network security against attacks
  ## Some fail2ban commands:
    # iptables -L <jail> --line-numbers
    # fail2ban-client set <jail> unbanip <ip to unban>
    # fail2ban-regex '<log output>' 'regex'
    # Other commands: https://www.fail2ban.org/wiki/index.php/Commands
  ## Check status of ssh jail:
    # sudo fail2ban-client status sshd
  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    restart: always
    network_mode: host
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /var/log/docker:/var/log/docker
      #- $DOCKERDIR/hass/home-assistant.log:/var/log/home-assistant.log:ro
      - $DOCKERDIR/fail2ban:/data
      - $DOCKERDIR/fail2ban/fail2ban.d:/etc/fail2ban/fail2ban.d
    environment:
      - TZ=$TZ
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=1d # Age at which bans should be purged from the database
      - F2B_IPTABLES_CHAIN=DOCKER-USER # Specifies the iptables chain to which the Fail2Ban rules should be added
#      - SSMTP_HOST=smtp.gmail.com
#      - SSMTP_PORT=465
#      - SSMTP_USER=$SMTP_EMAIL
#      - SSMTP_PASSWORD=$SMTP_PASS # Create an "app password" if you use 2FA
#      - SSMTP_TLS=YES

  # Google OAuth - Single Sign On using OAuth 2.0 for Traefik 2.2
  # https://console.developers.google.com/
  oauth:
    container_name: oauth
    # image: thomseddon/traefik-forward-auth:latest
    image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: always
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth # must match url defined in google web application
      - WHITELIST=$OAUTH_EMAIL_1,$OAUTH_EMAIL_2,$OAUTH_EMAIL_3 # email1,email2,email3 or $EMAIL1,$EMAIL2,$EMAIL3
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=$OAUTH_SESSION_LIFETIME
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

############################# FRONTENDS

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: --no-analytics # -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data 
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
#      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
#      - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Heimdall - Unified Frontend Alternative
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$HEIMDALL_PORT:80"
    volumes:
      - $DOCKERDIR/heimdall:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
      - "traefik.http.routers.heimdall-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  # Heimdall - Unified Frontend Alternative
  heimdall_local:
    container_name: heimdall_local
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$HEIMDALL_LOCAL_PORT:80"
    volumes:
      - $DOCKERDIR/heimdall_local:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall_local-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall_local-rtr.rule=Host(`heimdalllocal.$DOMAINNAME`)"
      - "traefik.http.routers.heimdall_local-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.heimdall_local-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall_local-rtr.service=heimdall_local-svc"
      - "traefik.http.services.heimdall_local-svc.loadbalancer.server.port=80"

############################# NEXTCLOUD

  # MariaDB
  nextcloud_mariadb:
    container_name: nextcloud_mariadb
    image: linuxserver/mariadb:latest
    #command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - $NEXTCLOUDMARIADB:3306
    volumes:
      - $DOCKERDIR/nextcloud_mariadb/data:/config
      - $DOCKERDIR/nextcloud_mariadb/mysql:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MARIADB_ROOT_PASSWORD_NEXTCLOUD
      - MYSQL_DATABASE=$MARIADB_DATABASE_NEXTCLOUD
      - MYSQL_USER=$MARIADB_USER_NEXTCLOUD
      - MYSQL_PASSWORD=$MARIADB_PASSWORD_NEXTCLOUD

  # NextCloud
  nextcloud:
    container_name: nextcloud
    image: nextcloud
    networks:
      - t2_proxy
    restart: always
    ports:
      - $NEXTCLOUD:80
    depends_on:
      - nextcloud_mariadb
    links:
      - nextcloud_mariadb
    volumes:
      - $DOCKERDIR/nextcloud:/var/www/html
      - $NEXTCLOUDDATADIR/data:/var/www/html/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME`)"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"
    
############################# MY OWN SITE: MAIN DOMAIN

  # MariaDB
  myownsite_mariadb:
    container_name: myownsite_mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      # - default
      # t2_proxy:
      #   ipv4_address: 192.168.90.250
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$MYOWNSITE_MARIADB_PORT:3306"
    volumes:
      - $DOCKERDIR/myownsite_mariadb/data:/config
      - $DOCKERDIR/myownsite_mariadb/mysql:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MARIADB_ROOT_PASSWORD
      - MYSQL_DATABASE=$WORDPRESS_DB_NAME
      - MYSQL_USER=$WORDPRESS_DB_USER
      - MYSQL_PASSWORD=$WORDPRESS_DB_PASSWORD

  # WordPress

  # Create file (volumes) php.conf.uploads.ini and paste below content before container creation:
  #file_uploads = On
  #memory_limit = 64M
  #upload_max_filesize = 64M
  #post_max_size = 64M
  #max_execution_time = 600

  # For development, give wordpress top container folder full access to all users.
  # Validate permissions, run: ls -ld myownsite_wordpress
  # Run: sudo chmod -R 777 myownsite_wordpress

  myownsite_wordpress:
    container_name: myownsite_wordpress
    image: wordpress:5.5
    restart: always
    ports:
      - $MYOWNSITE_WORDPRESS_PORT:80
      # - $MYOWNSITE_WORDPRESS_SSL_PORT:443
    volumes:
      - $DOCKERDIR/myownsite_wordpress/config/php.conf.uploads.ini:/usr/local/etc/php/conf.d/uploads.ini # Create file in advance
      - $DOCKERDIR/myownsite_wordpress/wp-app:/var/www/html # Full wordpress project
    environment:
      WORDPRESS_DB_HOST: myownsite_mariadb
      WORDPRESS_DB_NAME: $WORDPRESS_DB_NAME
      WORDPRESS_DB_USER: $WORDPRESS_DB_USER
      WORDPRESS_DB_PASSWORD: $WORDPRESS_DB_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.myownsite_wordpress-rtr.entrypoints=https"
      - "traefik.http.routers.myownsite_wordpress-rtr.rule=Host(`myownsite.$DOMAINNAME`,`$DOMAINNAME`,`www.$DOMAINNAME`)"
      - "traefik.http.routers.myownsite_wordpress-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.myownsite_wordpress-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.myownsite_wordpress-rtr.service=myownsite_wordpress-svc"
      - "traefik.http.services.myownsite_wordpress-svc.loadbalancer.server.port=80"
    depends_on:
      - myownsite_mariadb
    links:
      - myownsite_mariadb
    networks:
      - t2_proxy

############################# BLOG: SECOND DOMAIN

  # MariaDB
  blog_mariadb:
    container_name: blog_mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      # - default
      # t2_proxy:
      #   ipv4_address: 192.168.90.250
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$BLOG_MARIADB_PORT:3306"
    volumes:
      - $DOCKERDIR/blog_mariadb/data:/config
      - $DOCKERDIR/blog_mariadb/mysql:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MARIADB_BLOG_ROOT_PASSWORD
      - MYSQL_DATABASE=$WORDPRESS_BLOG_DB_NAME
      - MYSQL_USER=$WORDPRESS_BLOG_DB_USER
      - MYSQL_PASSWORD=$WORDPRESS_BLOG_DB_PASSWORD

  # WordPress

  # Create file (volumes) php.conf.uploads.ini and paste below content before container creation:
  #file_uploads = On
  #memory_limit = 64M
  #upload_max_filesize = 64M
  #post_max_size = 64M
  #max_execution_time = 600

  # For development, give wordpress top container folder full access to all users.
  # Validate permissions, run: ls -ld blog_wordpress
  # Run: sudo chmod -R 777 blog_wordpress

  blog_wordpress:
    container_name: blog_wordpress
    image: wordpress:5.5
    restart: always
    ports:
      - $BLOG_WORDPRESS_PORT:80
      # - $BLOG_WORDPRESS_SSL_PORT:443
    volumes:
      - $DOCKERDIR/blog_wordpress/config/php.conf.uploads.ini:/usr/local/etc/php/conf.d/uploads.ini # Create file in advance
      - $DOCKERDIR/blog_wordpress/wp-app:/var/www/html # Full wordpress project
    environment:
      WORDPRESS_DB_HOST: blog_mariadb
      WORDPRESS_DB_NAME: $WORDPRESS_BLOG_DB_NAME
      WORDPRESS_DB_USER: $WORDPRESS_BLOG_DB_USER
      WORDPRESS_DB_PASSWORD: $WORDPRESS_BLOG_DB_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.blog_wordpress-rtr.entrypoints=https"
      - "traefik.http.routers.blog_wordpress-rtr.rule=Host(`$DOMAINNAME_BLOG`,`www.$DOMAINNAME_BLOG`)"
      - "traefik.http.routers.blog_wordpress-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.blog_wordpress-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.blog_wordpress-rtr.service=blog_wordpress-svc"
      - "traefik.http.services.blog_wordpress-svc.loadbalancer.server.port=80"
    depends_on:
      - blog_mariadb
    links:
      - blog_mariadb
    networks:
      - t2_proxy

############################# SMART HOME

  # Zoneminder
  zoneminder_home:
    image: sgarzarella/zoneminder-armhf:latest
    container_name: zoneminder_home
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    privileged: true
    ports:
      - $ZONEMINDER_PORT:80
      - $ZONEMINDER_WEBSOCKET_PORT:9000
    environment:
      TZ: $TZ
      SHMEM: "50%"
      SSL_EVENTS: "1"
      PUID: $PUID
      PGID: $PGID
    volumes:
      - $PERMDIR/zoneminder/home:/config
      - $ZMCACHEDIR/Home:/var/cache/zoneminder
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.zoneminder_home-rtr.entrypoints=https"
      - "traefik.http.routers.zoneminder_home-rtr.rule=Host(`zoneminderhome.$DOMAINNAME`)"
      - "traefik.http.routers.zoneminder_home-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.zoneminder_home-rtr.middlewares=chain-zoneminder@file"
      ## HTTP Services
      - "traefik.http.routers.zoneminder_home-rtr.service=zoneminder_home-svc"
      - "traefik.http.services.zoneminder_home-svc.loadbalancer.server.port=80"

############################# SYSTEM

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      - "traefik.http.routers.dozzle-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

############################# MONITORING

  # Netdata - System monitoring
  netdata:
    container_name: netdata
    image: netdata/netdata:latest
    hostname: $HOST_NAME # set to fqdn of host
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - $NETDATA_PORT:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
      - no-new-privileges:true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PGID=$PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.netdata-rtr.entrypoints=https"
      - "traefik.http.routers.netdata-rtr.rule=Host(`netdata.$DOMAINNAME`)"
      - "traefik.http.routers.netdata-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.netdata-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.netdata-rtr.service=netdata-svc"
      - "traefik.http.services.netdata-svc.loadbalancer.server.port=19999"

  # Ouroboros - Automatic Docker Container Updates
  ouroboros:
    image: pyouroboros/ouroboros:latest
    container_name: ouroboros
    restart: unless-stopped
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: $TZ
      INTERVAL: 86400
      LOG_LEVEL: debug
      SELF_UPDATE: "true"
      CLEANUP: "true"
      IGNORE: traefik oauth myownsite_wordpress myownsite_mariadb myownsite_wordpress_staging myownsite_mariadb_staging zoneminder_home blog_wordpress blog_mariadb
#      NOTIFIERS: "tgram://$TGRAM_BOT_TOKEN/$TGRAM_CHAT_ID/"

  # StatPing 
#  statping:
#    container_name: statping
#    image: eafxx/statping:latest
#    restart: unless-stopped
#    networks:
#      - t2_proxy
#    security_opt:
#      - no-new-privileges:true
#    ports:
#      - $STATPING_PORT:8080
#    volumes:
#        - $DOCKERDIR/statping:/app
#    environment:
#        - PUID=$PUID
#        - PGID=$PGID        
#        - TZ=$TZ
#        - SKIPUPDATE=no
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.statping-rtr.entrypoints=https"
#      - "traefik.http.routers.statping-rtr.rule=Host(`statping.$DOMAINNAME`)"
#      - "traefik.http.routers.statping-rtr.tls=true"
#      ## Middlewares
#      - "traefik.http.routers.statping-rtr.middlewares=chain-no-auth@file"
#      ## HTTP Services
#      - "traefik.http.routers.statping-rtr.service=statping-svc"
#      - "traefik.http.services.statping-svc.loadbalancer.server.port=8080"

#  # WireShark
#  wireshark:
#    image: linuxserver/wireshark:latest
#    container_name: wireshark
#    cap_add:
#      - NET_ADMIN
#    network_mode: host
#    restart: unless-stopped
#    environment:
#      - PUID=$PUID
#      - PGID=$PGID
#      - TZ=$TZ
#    volumes:
#      - $DOCKERDIR/wireshark:/config
#    ports:
#      - $WIRESHARK_PORT:3000

############################# MAINTENANCE

  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
  